#!/usr/bin/env python
# Exploit Title: ERPSCAN EBS Pentesting tool
# Date: 03/20/2018
# Exploit Author: @0xalg
# Vendor Homepage: https://ERPScan.com
# Version: 1.1

from subprocess import PIPE, Popen
import shlex
import argparse
from ansicolor import red, green

help_desc = """
\n\nERPSCAN EBS Pentesting tool  v1.0\n\nby ERPScan (c) 2018\n\n
It is a wrapper for ERPSCAN EBS checking modules.
There are 4 main modules:
1. EBS DB Users Brute-force (dbUsersBforce.py) (also includes `ebsDecrypt.py`),
2. EBS Users Brute-force (ebsUsersBforce.py),
3. EBS Java Serialization test (javaSerDetect.py),
4. EBS XML Serialization test (xmlSerDetect.py),
"""

exploits = [{'name': 'dbUsersBforce.py',
             'args': ['host', 'port', 'sid', 'dec', 'file', 'verbose'],
             'help': 'EBS DB Users Brute-force python script tests for default DB users '
                     'with the predefined passwords.\nAlso it can check whether any bruted DB user '
                     'has possibility to decrypt EBS Users passwords '
                     '(in the case of Password Hashing is not implemented).'
             },
            {'name': 'ebsUsersBforce.py',
             'args': ['host', 'port', 'ssl', 'timeout', 'verbose'],
             'help': 'EBS Users Brute-force python script brutes EBS default users with predefined passwords.'
             },
            {'name': 'javaSerDetect.py',
             'args': ['host', 'port', 'url', 'ssl', 'timeout', 'verbose'],
             'help': 'EBS python script for Java Serialization sleep payloads testing based on '
                     'Apache Commons Collections 3.'
             },
            {'name': 'xmlSerDetect.py',
             'args': ['host', 'port', 'url', 'ssl', 'timeout', 'verbose'],
             'help': 'EBS python script for XML Serialization sleep payload testing based on `CVE-2017-3506 & 10271`.'}]


def f_verbose(value):
    print value.replace("[*]", green("[*]")).replace("[x]", red("[x]"))


def f_run(cmd):
    args_ = shlex.split(cmd)
    proc = Popen(args_, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate()
    exitcode = proc.returncode
    return exitcode, out, err


def f_frame(text):
    return '''
+{h}+
|{t}|
+{h}+
'''.format(h='-' * len(text), t=text).strip()


def f_check():
    if args.module:
        e = exploits[args.module - 1]
        e = exploits[args.module - 1]
        f_verbose(f"\n[*] {e['help']}\n")
        cmd = 'python ' + e['name']
        for i in e['args']:
            if i in ['verbose', 'ssl'] and getattr(args, i):
                cmd += ' --{a}'.format(a=i)
            else:
                tmp = i
                if i == 'port':
                    if args.module == 1: tmp = 'dport'
                    elif args.module == 4: tmp = 'wport'
                    else: tmp = 'eport'
                elif i == 'url':
                    tmp = 'eurl' if args.module == 3 else 'wurl'
                if getattr(args, tmp):
                    cmd += ' --{a} {v}'.format(a=i, v=str(getattr(args, tmp)))
        if args.verbose:
            f_verbose(f"[*] Next command will be execute:\n\n{cmd}")
        try:
            exitcode, out, err = f_run(cmd)
        except OSError as e:
            f_verbose("[x] Failed to execute module!\n" + e.output)
        e = exploits[args.module - 1]
        e = exploits[args.module - 1]
    else:
        f_verbose("[*] You chose all modules.")
        for i in xrange(1, 5):
            args.module = i
            f_check()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=help_desc, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-m', '--module', default=0, type=int, help='Choose a module to execute (default: 0 - run all)')
    parser.add_argument('-H', '--host', default='127.0.0.1', help='Target host (default: 127.0.0.1). Example: ebs.example.com')
    parser.add_argument('-dP', '--dport', default=1521, type=int, help='DB port (default: 1521)')
    parser.add_argument('-eP', '--eport', default=8000, type=int, help='EBS web port (default: 8000)')
    parser.add_argument('-wP', '--wport', default=7001, type=int, help='WebLogic port (default: 7001)')
    parser.add_argument('-eU', '--eurl', default='OA_HTML/iesRuntimeServlet', help='EBS target URL (default: OA_HTML/iesRuntimeServlet)')
    parser.add_argument('-wU', '--wurl', default='wls-wsat/CoordinatorPortType', help='WebLogic target URL (default: wls-wsat/CoordinatorPortType)')
    parser.add_argument('-s', '--ssl', action='store_true', help='Enable SSL')
    parser.add_argument('-dS', '--sid', default='EBSDB', help='DB SID (default: EBSDB)')
    parser.add_argument('-dD', '--dec', default='Y', help='Try to decrypt EBS Users Passwords? Y/N (default: Y)')
    parser.add_argument('-dF', '--file', default='dbCheckResults.txt', help='Add file name to save all results (default: dbCheckResults.txt)')
    parser.add_argument('--timeout', default=0, type=int, help='Connection timeout in seconds. '
                                                               'Default value is already used in some scripts. '
                                                               'By changing it, you take responsibility for a proper '
                                                               'module execution')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose mode')

    args = parser.parse_args()

    f_check()
